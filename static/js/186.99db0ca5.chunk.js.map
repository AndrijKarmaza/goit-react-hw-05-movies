{"version":3,"file":"static/js/186.99db0ca5.chunk.js","mappings":"2OAsDA,UAhDgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwCE,EAAAA,EAAAA,YAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAuBA,IArBAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,8GAE2BC,EAAAA,EAAAA,IAAkBV,GAF7C,OAEUW,EAFV,OAGIP,EAAgBO,GAHpB,gDAKIL,GAAS,GALb,yBAOIE,GAAW,GACXI,EAAAA,QAAAA,SARJ,6EAFc,sBACdJ,GAAW,GADG,mCAadK,EACD,GAAE,CAACb,IAEJO,GAAWK,EAAAA,QAAAA,SAAiB,cAE5BP,GACES,EAAAA,OAAAA,QAAe,6DAEZX,EAIL,OAA4B,IAAxBA,EAAaY,QACR,sEAIP,wBACGZ,EAAaa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,OAAhB,OAChB,2BACE,qCAAaA,MACb,uBAAID,MAFGD,EADO,KAQvB,C,+LClDKG,EAAW,+BACXC,EAAM,mCAENC,EAAW,mCAAG,oGACKC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,wCACsBC,IAF3B,cACZV,EADY,yBAIXA,EAASa,KAAKC,SAJH,2CAAH,qDAOXC,EAAmB,mCAAG,WAAMC,GAAN,uFACHJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBAC4BM,IAFzB,cACpBhB,EADoB,yBAInBA,EAASa,KAAKC,SAJK,2CAAH,sDAOnBG,EAAgB,mCAAG,WAAM5B,GAAN,uFACAuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACApB,EADA,oBACmBqB,IAFnB,cACjBV,EADiB,yBAIhBA,EAASa,MAJO,2CAAH,sDAOhBK,EAAc,mCAAG,WAAM7B,GAAN,uFACEuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACApB,EADA,4BAC2BqB,IAF7B,cACfV,EADe,yBAIdA,EAASa,KAAKM,MAJA,2CAAH,sDAOdpB,EAAiB,mCAAG,WAAMV,GAAN,uFACDuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACApB,EADA,4BAC2BqB,IAF1B,cAClBV,EADkB,yBAIjBA,EAASa,KAAKC,SAJG,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","servises/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from '../../servises/api.js';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [movieReviews, setMovieReviews] = useState();\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    async function getMovieReviews() {\n      try {\n        const response = await fetchMovieReviews(movieId);\n        setMovieReviews(response);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoading(false);\n        Loading.remove();\n      }\n    }\n    getMovieReviews();\n  }, [movieId]);\n\n  loading && Loading.standard('Loading...');\n\n  error &&\n    Notify.failure('Oops! Something went wrong. Please try reloading the page');\n\n  if (!movieReviews) {\n    return;\n  }\n\n  if (movieReviews.length === 0) {\n    return <h3>We don't have any weriews for this movie</h3>;\n  }\n\n  return (\n    <ul>\n      {movieReviews.map(({ id, content, author }) => (\n        <li key={id}>\n          <h3>Author: {author}</h3>\n          <p>{content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '24332f5bdb5cb6313d5fde27ff166678';\n\nconst fetchMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/week?api_key=${KEY}`\n  );\n  return response.data.results;\n};\n\nconst fetchMoviesForQuery = async value => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${value}`\n  );\n  return response.data.results;\n};\n\nconst fetchMovieDetail = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nconst fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return response.data.cast;\n};\n\nconst fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return response.data.results;\n};\n\nexport {\n  fetchMovies,\n  fetchMoviesForQuery,\n  fetchMovieDetail,\n  fetchMovieCast,\n  fetchMovieReviews,\n};\n"],"names":["movieId","useParams","useState","movieReviews","setMovieReviews","error","setError","loading","setLoading","useEffect","fetchMovieReviews","response","Loading","getMovieReviews","Notify","length","map","id","content","author","BASE_URL","KEY","fetchMovies","axios","data","results","fetchMoviesForQuery","value","fetchMovieDetail","fetchMovieCast","cast"],"sourceRoot":""}